name: Publish on push

on:
  push:
    branches:
      - main
      - develop
    paths:
      - src/**

jobs:
  Quality-check:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci')"
    outputs:
      normalize_change: ${{ steps.is-normalize-changed.outputs.normalize }}
      transform_change: ${{ steps.is-normalize-changed.outputs.transform }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Extract branch name
        if: github.event_name != 'pull_request'
        shell: bash
        run: echo "::set-output name=BRANCH_NAME::$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Check file changes
        id: is-normalize-changed
        uses: dorny/paths-filter@v2
        with:
          base: ${{ steps.extract_branch.outputs.BRANCH_NAME }}
          filters: |
            normalize:
              - 'src/normalize/**'
            transform:
              - 'src/transform/**'

      - name: Install dependencies
        run: |
          make install-deps
          curl -sSL https://install.python-poetry.org | python -
          poetry --version

      - name: Run format
        run: |
          make fmt

      - name: Run linting
        run: |
          make lint

      - name: Download latest auto
        run: |
          auto_download_url="$(curl -fsSL https://api.github.com/repos/intuit/auto/releases/latest | jq -r '.assets[] | select(.name == "auto-linux.gz") | .browser_download_url')"
          wget -O- "$auto_download_url" | gunzip > ~/auto
          chmod a+x ~/auto

      - name: Create release
        run: |
          ~/auto shipit
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

  normalize-publish:
    runs-on: ubuntu-latest
    needs: Quality-check
    if: ${{ needs.Quality-check.outputs.normalize_change == 'true' }}
    steps:

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Build package
        id: build-package
        run: cd src/normalize && python -m build

  transform-publish:
    runs-on: ubuntu-latest
    needs: Quality-check
    if: ${{ needs.Quality-check.outputs.transform_change == 'true' }}
    steps:

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Build package
        id: build-package
        run: cd src/transform && python -m build