name: Publish on push

on:
  pull_request:
    branches: # PRs to the following branches will trigger the workflow
      - main
      - develop
    paths:
      - src/**

jobs:
  auto-release:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci')"
    outputs:
      auto-version: ${{ steps.auto-version.outputs.version }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Check changes in normalize
        id: is-normalize-changed
        uses: dorny/paths-filter@v2
        with:
          filters: |
            normalize:
              - 'src/normalize/**'
            transform:
              - 'src/transform/**'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip bump2version
          curl -sSL https://install.python-poetry.org | python -
          poetry --version

      # - name: Download latest auto
      #   run: |
      #     auto_download_url="$(curl -fsSL https://api.github.com/repos/intuit/auto/releases/latest | jq -r '.assets[] | select(.name == "auto-linux.gz") | .browser_download_url')"
      #     wget -O- "$auto_download_url" | gunzip > ~/auto
      #     chmod a+x ~/auto

      # - name: Check whether a release is due
      #   id: auto-version
      #   run: |
      #     version="$(~/auto version)"
      #     echo "::set-output name=version::$version"
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Create release
      #   run: |
      #     ~/auto shipit
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

  # build-and-publish:
  #   runs-on: ubuntu-latest
  #   needs: auto-release
  #   if: needs.auto-release.outputs.auto-version != ''
  #   steps:

  #     - name: Get tag of latest release
  #       id: latest-release
  #       run: |
  #         latest_tag="$(curl -fsSL https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest | jq -r .tag_name)"
  #         cd src/transform && bump2version ${{ steps.auto-version.outputs.version }} && cd ../..
  #         echo "::set-output name=tag::$latest_tag"

  #     - name: Checkout source
  #       uses: actions/checkout@v2
  #       with:
  #         ref: ${{ steps.latest-release.outputs.tag }}
  #         fetch-depth: 0